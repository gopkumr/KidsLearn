@using KidsLearn.Shared;
@using System.Net.Http.Headers;
@using Newtonsoft.Json.Linq;
@inject HttpClient Http;
@inject IJSRuntime JS

<MudStack Row="true">
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudButton Size="Size.Small" EndIcon="@Icons.Material.Filled.PlayArrow" OnClick="@Speak">Speak</MudButton>
        <MudMenu Size="Size.Medium" Label="Help" Variant="Variant.Outlined" EndIcon="@Icons.Filled.Help" IconColor="Color.Secondary">
            <ActivatorContent>
                <MudButton Size="Size.Large" Class="p-3" EndIcon="@Icons.Material.Filled.Help">Help</MudButton>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem @onclick="()=>MoreOptions(defString)">
                    Meaning of the word
                </MudMenuItem>
                <MudMenuItem @onclick="()=>MoreOptions(exampleString)">
                    Use the word in a sentence
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
        <MudMenu Size="Size.Medium" Label="Speed" Variant="Variant.Outlined" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary">
            <ActivatorContent>
                <MudButton Size="Size.Large" Class="p-3" EndIcon="@Icons.Material.Filled.Speed">Speed</MudButton>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem @onclick="()=>SelectSpeed(0.5)">
                    @if (speed == 0.5)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    } 0.5
                </MudMenuItem>
                <MudMenuItem @onclick="()=>SelectSpeed(0.7)">
                    @if (speed == 0.7)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    }
                    0.7
                </MudMenuItem>
                <MudMenuItem @onclick="()=>SelectSpeed(0.9)">
                    @if (speed == 0.9)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    }
                    0.9
                </MudMenuItem>
                <MudMenuItem @onclick="()=>SelectSpeed(1.1)">
                    @if (speed == 1.1)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    }
                    1.1
                </MudMenuItem>
                <MudMenuItem @onclick="()=>SelectSpeed(1.3)">
                    @if (speed == 1.3)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    }
                    1.3
                </MudMenuItem>
                <MudMenuItem @onclick="()=>SelectSpeed(1.5)">
                    @if (speed == 1.5)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    }
                    1.5
                </MudMenuItem>
                <MudMenuItem @onclick="()=>SelectSpeed(1.7)">
                    @if (speed == 1.7)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    }
                    1.7
                </MudMenuItem>
                <MudMenuItem @onclick="()=>SelectSpeed(2.0)">
                    @if (speed == 2.0)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    }
                    2.0
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
        <MudMenu Size="Size.Medium" Label="Pitch" Variant="Variant.Outlined" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary">
            <ActivatorContent>
                <MudButton Size="Size.Large" Class="p-3" EndIcon="@Icons.Material.Filled.KeyboardVoice">Pitch</MudButton>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem @onclick="()=>SelectPitch(0)">
                    @if (pitch == 0)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    } 0
                </MudMenuItem>
                <MudMenuItem @onclick="()=>SelectPitch(1)">
                    @if (pitch == 1)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    } 1
                </MudMenuItem>
                <MudMenuItem @onclick="()=>SelectPitch(2)">
                    @if (pitch == 2)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    } 2
                </MudMenuItem>

            </ChildContent>
        </MudMenu>
        <MudMenu Size="Size.Medium" Label="Voice" Variant="Variant.Outlined" EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary">
            <ActivatorContent>
                <MudButton Size="Size.Large" Class="p-3" EndIcon="@Icons.Material.Filled.VoiceChat">Voice</MudButton>
            </ActivatorContent>
            <ChildContent>
                @foreach(var lang in australianVoices){
                <MudMenuItem @onclick="()=>SelectVoice(lang.Name)">
                    @if (selectedVoice == lang.Name)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Title="Tick" />
                    } @lang.Name
                </MudMenuItem>
                }
            </ChildContent>
        </MudMenu>
    </MudButtonGroup>
</MudStack>


@code {

    double speed = 1.1;
    int pitch = 1;
    string selectedVoice = string.Empty;
    List<Language> australianVoices;

    [Parameter]
    public string TextToSpeak { get; set; } = string.Empty;

    [Parameter]
    public bool SpeakOnLoad { get; set; } = false;

    private List<DictionaryResponse> dictionaryResponse = null;

    private string exampleString = "example";
    private string defString = "definition";

    private async Task Speak()
    {
        await JS.InvokeVoidAsync("speakText", TextToSpeak, speed, pitch, selectedVoice);

    }

    private async Task Stop()
    {
        await JS.InvokeVoidAsync("stopSpeaking");

    }

    private async Task Pause()
    {
        await JS.InvokeVoidAsync("pauseSpeaking");

    }

    private void SelectSpeed(double selectedSpeed)
    {
        speed = selectedSpeed;
    }

    private void SelectPitch(int selectedPitch)
    {
        pitch = selectedPitch;
    }


    private void SelectVoice(string name)
    {
        selectedVoice = name;
    }


    private async Task GetVoices()
    {
        var voices = await JS.InvokeAsync<List<Language>>("getAllVoices");
        australianVoices=voices.Where(q=>q.Lang.Equals("en-AU", StringComparison.InvariantCultureIgnoreCase)).ToList();
        selectedVoice = australianVoices.First().Name;
    }

    private async Task MoreOptions(string option)
    {
        if (dictionaryResponse == null)
        {
            try
            {
                var uri = $"https://api.dictionaryapi.dev/api/v2/entries/en/{TextToSpeak}";
                var request = new HttpRequestMessage(HttpMethod.Get, uri);

                var response = await Http.SendAsync(request);
                var value = await response.Content.ReadAsStringAsync();
                dictionaryResponse = await response.Content.ReadFromJsonAsync<List<DictionaryResponse>>();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        if (dictionaryResponse != null)
            switch (option)
            {
                case "definition":
                    await JS.InvokeVoidAsync("speakText", $"{dictionaryResponse.First().meanings.First().partOfSpeech}: {dictionaryResponse.First().meanings.First().definitions.First().definition}", speed, pitch, selectedVoice);
                    break;
                case "example":
                    var meaning = dictionaryResponse.First().meanings.Where(q => q.definitions.Any(r => !string.IsNullOrEmpty(r.example))).FirstOrDefault();
                    var example = "Sorry, no example available for this word";
                    if (meaning != null)
                    {
                        var definition = meaning.definitions.First(q => !string.IsNullOrEmpty(q.example));
                        example = $"{meaning.partOfSpeech}, {definition.example}";
                    }

                    await JS.InvokeVoidAsync("speakText", example, speed, pitch, selectedVoice);
                    break;
                default:
                    await JS.InvokeVoidAsync("speakText", "No example available", speed, pitch, selectedVoice);
                    break;
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Dictation/AudioPlayer.razor.js");

        if (firstRender)
        {
            dictionaryResponse = null;
            await GetVoices();

            if (SpeakOnLoad)
            {
                Speak();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
