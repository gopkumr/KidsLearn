@using KidsLearn.Shared.models;
@using KidsLearn.Shared.services;

@inject ICountryService countryService;
@inject IDialogService DialogService;
@inject NavigationManager NavManager;

@page "/hangman"

<MudText Typo="Typo.h3" Class="ml-4">Hangman</MudText>

<MudGrid Spacing="2" Justify="Justify.Center">
    <MudItem xs="4">
        <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8">
            <Man WordToRender="@wordToRender" CharacterChosen="@characterChosen" Hint_Type="@hint_type" OnManHanged="FailedWord" />
        </MudPaper>
    </MudItem>
    <MudItem xs="8">
        <MudGrid>
            <MudItem xs="12">
                <Word WordToRender="@wordToRender" TypedSoFar="@wordTypedSoFar" OnWordCompleted="CompletedWord"  Reveal="@revealWord"/>
            </MudItem>
            <MudItem xs="12">
                <MudGrid Justify="Justify.FlexStart" Spacing="1">
                    @for (int i = 0; i < letters.Count; i++)
                    {
                        int localIndex = i;
                        var disabledClass = "mud-theme-primary";
                        var additionalClass = "d-flex align-center justify-center mud-width-full py-8 ";
                        if (wordTypedSoFar.Contains(@letters[localIndex]))
                        {
                            additionalClass = additionalClass + disabledClass;
                        }
                        <MudItem xs="2">
                            <MudPaper Elevation="25" Class="@additionalClass" Outlined="true" Square="true" Style="cursor: pointer;" @onclick="()=>CharacterChosen(letters[localIndex])">
                                <MudText Typo="Typo.h4">@letters[localIndex].ToString()</MudText>
                            </MudPaper>
                        </MudItem>
                    }
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>

@code {

    string wordTypedSoFar="";
    char characterChosen=default(char);
    List<char> letters = new() { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };
    string wordToRender = "";
    string hint_type = string.Empty;
    bool revealWord = false;

    protected void CharacterChosen(char character)
    {
        if (!wordTypedSoFar.Contains(character))
        {
            wordTypedSoFar = $"{wordTypedSoFar}{character}";
            characterChosen = character;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var countries = await countryService.GetCountries();
        var randomCountry = countries.OrderBy(q => Random.Shared.Next()).First();
        wordToRender = randomCountry.name.ToUpper();
        hint_type = "Country";
        StateHasChanged();
    }

    protected async Task FailedWord()
    {
        revealWord = true;
        await DialogService.ShowMessageBox("Failed", "You Failed to complete");
        NavManager.NavigateTo("/");
    }

    protected async Task CompletedWord()
    {
        await DialogService.ShowMessageBox("Success", "You successfully completed the word");
        NavManager.NavigateTo("/");
    }
}
