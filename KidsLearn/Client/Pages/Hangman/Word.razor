@using System.Text.RegularExpressions;
<MudStack Row="true">
    @if (string.IsNullOrEmpty(WordToRender))
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
    else
    {
        foreach (char ch in WordToRender)
        {
            var charcter = ch.ToString();
            if (Regex.IsMatch(ch.ToString(), "[^A-Z]"))
            {
                charcter = " ";
            }

            <MudPaper Class="pa-3">
                @if (TypedSoFar.Contains(ch) || Reveal || charcter.Equals(" "))
                {
                    <MudText Typo="Typo.h4">@charcter</MudText>
                }
                else
                {
                    <MudIcon Icon="@Icons.Material.Filled.HorizontalRule" Title="Dash" />
                }
            </MudPaper>
        }
    }
</MudStack>

@code {
    string typedSoFar = string.Empty;

    [Parameter]
    public string WordToRender { get; set; } = "";

    [Parameter]
    public string TypedSoFar
    {
        get
        {
            return typedSoFar;
        }
        set
        {
            if (typedSoFar != value)
            {
                typedSoFar = value;
                if (!string.IsNullOrEmpty(typedSoFar) && Regex.Replace(WordToRender, "[^A-Z]", "").Except(TypedSoFar).Count() == 0)
                {
                    OnWordCompleted.InvokeAsync();
                }
            }
        }
    }

    [Parameter]
    public EventCallback OnWordCompleted { get; set; }

    [Parameter]
    public bool Reveal { get; set; }

}
